
// motor defines
#define MOTOR_L OUT_A
#define MOTOR_R OUT_B
#define MOTOR OUT_AB

// light sensor defines
#define SENSE_LIGHT_L IN_1
#define SENSE_LIGHT_R IN_2
#define SENSE_LIGHT_B IN_3


// defines
#define SPEED 80
#define PID_P 0.5
#define PID_I 0.5
#define BLACKLINE 550
#define CALIB_FACTOR 0
#define TURNVAL_L 80
#define TURNVAL_R -80
#define TURNBACK_L 80
#define TURNBACK_R -80



int FollowLine(bool drive_straight)
{	
    float light_l, light_r;
    float err_prev = 0, err_act = 0;

	while(drive_straight){
        	ClearScreen();

        	TextOut(0, LCD_LINE1, "Turn:");

        
        	light_l = GetInput(SENSE_LIGHT_L,RawValueField);
        	light_r = GetInput(SENSE_LIGHT_R,RawValueField);
                
        	float speed_l, speed_r;
        
        if( light_l > BLACKLINE  && light_r > BLACKLINE ){
            speed_l = 0;
            speed_r = 0;
            drive_straight = false;
        }
        else{

            err_act = (light_l - light_r + CALIB_FACTOR)*PID_P + err_prev*PID_I; // offset from the line
            err_prev = err_act;

            if(err_act > 0){
              TextOut(40, LCD_LINE1, "Left");
            } 
            else {
               TextOut(40, LCD_LINE1, "Right");
            }
        
            speed_l = SPEED - (err_act);
            speed_r = SPEED + (err_act);
        
            if(speed_l < 0){
                speed_l = 0;
            }
            if(speed_r < 0){
                speed_r = 0;
            }
	    if(speed_l > 100){
                speed_l = 100;
            }
            if(speed_r > 100){
                speed_r = 100;
            }
	
        }

        OnRev(MOTOR_L, speed_l);
        OnRev(MOTOR_R, speed_r);
                
    }


	return 0;
}

//////////////////////////////////////////////////////////////////////////////////////
//
int KeepGoing(bool drive_straight)
{	
    float light_l, light_r, light_b;
    float err_prev = 0, err_act = 0;

	while(drive_straight){
        	ClearScreen();

        	TextOut(0, LCD_LINE1, "Turn:");

        
        	light_l = GetInput(SENSE_LIGHT_L,RawValueField);
        	light_r = GetInput(SENSE_LIGHT_R,RawValueField);
		light_b = GetInput(SENSE_LIGHT_B,RawValueField);
                
        	float speed_l, speed_r;
        
        if( light_b > BLACKLINE ){
            drive_straight = false;
        }
        else{

            err_act = (light_l - light_r + CALIB_FACTOR)*PID_P + err_prev*PID_I; // offset from the line
            err_prev = err_act;

            if(err_act > 0){
              TextOut(40, LCD_LINE1, "Left");
            } 
            else {
               TextOut(40, LCD_LINE1, "Right");
            }
        
            speed_l = SPEED - (err_act);
            speed_r = SPEED + (err_act);
        
            if(speed_l < 0){
                speed_l = 0;
            }
            if(speed_r < 0){
                speed_r = 0;
            }
	    if(speed_l > 100){
                speed_l = 100;
            }
            if(speed_r > 100){
                speed_r = 100;
            }
	
        }

        OnRev(MOTOR_L, speed_l);
        OnRev(MOTOR_R, speed_r);
                
    }


	return 0;
}


//////////////////////////////////////////////////////////////////////////////////////
//
int TurnRight(bool FindLine){

    float light_l, light_r;
    bool RightSensor = false;


	OnRev(MOTOR_L, 80);
	OnRev(MOTOR_R, 50);

	Wait(100);
	
	OnRev(MOTOR_L, TURNVAL_L);
	OnRev(MOTOR_R, TURNVAL_R);
	
	while(FindLine){

        	light_l = GetInput(SENSE_LIGHT_L,RawValueField);
        	light_r = GetInput(SENSE_LIGHT_R,RawValueField);

		if (light_r > BLACKLINE && light_l < BLACKLINE)
		{ 
			RightSensor = true;
		
			OnRev(MOTOR_L, 40);
			OnRev(MOTOR_R, 10);

		}
		if (light_r < BLACKLINE && RightSensor)
		{
			FindLine = false;

			OnRev(MOTOR_L, 0);
			OnRev(MOTOR_R, 0);
		}


	}
	return 0;
}

/////////////////////////////////////////////////////////////////////////////
//
int TurnLeft(bool FindLine){

    float light_l, light_r;
    bool LeftSensor = false;

	OnRev(MOTOR_L, 50);
	OnRev(MOTOR_R, 80);

	Wait(100);
	
	OnRev(MOTOR_L, TURNVAL_R);
	OnRev(MOTOR_R, TURNVAL_L);
	
	while(FindLine){

        	light_l = GetInput(SENSE_LIGHT_L,RawValueField);
        	light_r = GetInput(SENSE_LIGHT_R,RawValueField);

		if (light_l > BLACKLINE && light_r < BLACKLINE)
		{ 
			LeftSensor = true;
		
			OnRev(MOTOR_L, 10);
			OnRev(MOTOR_R, 40);

		}
		if (light_l < BLACKLINE && LeftSensor)
		{
			FindLine = false;

			OnRev(MOTOR_L, 0);
			OnRev(MOTOR_R, 0);
		}


	}
	return 0;
}

/////////////////////////////////////////////////////////////////////////////
//
int TurnBack(bool FindLine, int nxt_pos){

	float light_l, light_r, light_b;
	bool LeftSensor, RightSensor, BackSensor, flagt;

	LeftSensor = false;
	RightSensor = false;
	BackSensor = false;
	flagt = false;

	OnRev(MOTOR_L, -70);
	OnRev(MOTOR_R, -70);

	
	while(!BackSensor){

		light_b = GetInput(SENSE_LIGHT_B,RawValueField);

		if (light_b > BLACKLINE)
		{
			BackSensor = true;
			OnRev(MOTOR_L, 0);
			OnRev(MOTOR_R, 0);
			
		}
	}
	

	while(FindLine){

		light_l = GetInput(SENSE_LIGHT_L,RawValueField);
		light_r = GetInput(SENSE_LIGHT_R,RawValueField);
		light_b = GetInput(SENSE_LIGHT_B,RawValueField);

		switch(nxt_pos)
		{
		case 1:	//Turn Right
			
			OnRev(MOTOR_L, TURNBACK_L);
			OnRev(MOTOR_R, TURNBACK_R);
			if (light_r > BLACKLINE && light_l < BLACKLINE)
			{ 
				RightSensor = true;
		
				OnRev(MOTOR_L, 50);
				OnRev(MOTOR_R, 10);

			}
			if (light_r < BLACKLINE && RightSensor)
			{
				FindLine = false;

				OnRev(MOTOR_L, 0);
				OnRev(MOTOR_R, 0);
			}
		break;

		case 2: //Turn all
	
			OnRev(MOTOR_L, TURNBACK_L);
			OnRev(MOTOR_R, TURNBACK_R);

			if (light_r > BLACKLINE && light_l < BLACKLINE)
			{ 
				RightSensor = true;
		
				OnRev(MOTOR_L, 50);
				OnRev(MOTOR_R, 10);

			}
			if (light_r < BLACKLINE && RightSensor)
			{
				if(flagt){
					FindLine = false;

					OnRev(MOTOR_L, 0);
					OnRev(MOTOR_R, 0);
				}
				else{
					flagt = true;
					RightSensor = false;

				}
			}
		break;

		case 3: //Turn Left

			OnRev(MOTOR_L, TURNBACK_R);
			OnRev(MOTOR_R, TURNBACK_L);

			if (light_l > BLACKLINE && light_r < BLACKLINE)
			{ 
				LeftSensor = true;
		
				OnRev(MOTOR_L, 10);
				OnRev(MOTOR_R, 50);

			}
			if (light_l < BLACKLINE && LeftSensor)
			{
				FindLine = false;

				OnRev(MOTOR_L, 0);
				OnRev(MOTOR_R, 0);
			}
		break;

	
		
		}

	
	}
	return 0;
}



///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////

task main()
{
	// set sensors
	SetSensor(SENSE_LIGHT_L, SENSOR_LIGHT);
	SetSensor(SENSE_LIGHT_R, SENSOR_LIGHT);	
	SetSensor(SENSE_LIGHT_B, SENSOR_LIGHT);


	SetSensorLight(SENSE_LIGHT_L);
	SetSensorLight(SENSE_LIGHT_R);
	SetSensorLight(SENSE_LIGHT_B);
    
// Load circuit

	int circuit[] = {1, 2, 2, 1, 3, 3, 1, 1, 3, 1, 6, 3, 5, 2, 3, 1, 3, 1, 1, 4, 5, 1, 3, 3};
	int length = ArrayLen(circuit);

    
    
	while(1){

// Different test circuits

		for(int i = 0; i < length; i++){

		int actualcase = circuit[i];

			switch(actualcase)
			{
			case 1:	//Go straight
				FollowLine(1);
				KeepGoing(1);
			break;

			case 2: //Turn Right
				FollowLine(1);
				TurnRight(1);
			break;

			case 3: //Turn Left
				FollowLine(1);
				TurnLeft(1);
			break;

			case 4: //Back and Right
				FollowLine(1);
				TurnBack(1,1);
			break;

			case 5: //Back and Left
				FollowLine(1);
				TurnBack(1,3);
			break;

			case 6: //Back and straight
				FollowLine(1);
				TurnBack(1,2);
			break;
		
			default: //Go straight
				FollowLine(1);
				KeepGoing(1);
			break;
			
			}

		} 



/*		//Complete circuit		
		FollowLine(1);
		KeepGoing(1);

		FollowLine(1);
		TurnLeft(1);

		FollowLine(1);
		TurnBack(1,1);

		FollowLine(1);
		TurnRight(1);

		FollowLine(1);
		TurnRight(1);

		FollowLine(1);
		TurnBack(1,3);

		FollowLine(1);
		KeepGoing(1);
	
		FollowLine(1);
		TurnBack(1,2);
		
		FollowLine(1);
		TurnRight(1);
		
		FollowLine(1);
		TurnLeft(1);
		
		FollowLine(1);
		KeepGoing(1);

		FollowLine(1);
		TurnLeft(1);

		FollowLine(1);
		KeepGoing(1);

		FollowLine(1);
		KeepGoing(1);

		FollowLine(1);
		KeepGoing(1);

		FollowLine(1);
		TurnLeft(1);
		
		FollowLine(1);
		TurnLeft(1);


/*
		FollowLine(1);
		TurnBack(1,1);
		FollowLine(1);
		TurnBack(1,2);
		FollowLine(1);
		TurnBack(1,3);


		FollowLine(1);
		TurnLeft(1);
		FollowLine(1);
		TurnRight(1);
		FollowLine(1);
		TurnLeft(1);
		FollowLine(1);
		TurnRight(1);


		FollowLine(1);
		TurnRight(1);
		FollowLine(1);
		TurnRight(1);
		FollowLine(1);
		TurnRight(1);
		FollowLine(1);
		TurnRight(1);

*/


	}

    Off(MOTOR);

}


